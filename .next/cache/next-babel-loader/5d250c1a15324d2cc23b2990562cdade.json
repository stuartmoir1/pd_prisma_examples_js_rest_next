{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/stuartmoir/Desktop/profdev/prisma/my-prisma-examples/javascript/7_rest-nextjs/pages/p/[id].jsx\";\n\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport ReactMarkdown from 'react-markdown';\nimport Router from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../../components/Layout';\n\nfunction publish(id) {\n  var res, data;\n  return _regeneratorRuntime.async(function publish$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/api/publish/\".concat(id), {\n            method: 'PUT'\n          }));\n\n        case 2:\n          res = _context.sent;\n          _context.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context.sent;\n          _context.next = 8;\n          return _regeneratorRuntime.awrap(Router.push('/'));\n\n        case 8:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nfunction destroy(id) {\n  var res, data;\n  return _regeneratorRuntime.async(function destroy$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(fetch(\"http://localhost:3000/api/post/\".concat(id), {\n            method: 'DELETE'\n          }));\n\n        case 2:\n          res = _context2.sent;\n          _context2.next = 5;\n          return _regeneratorRuntime.awrap(res.json());\n\n        case 5:\n          data = _context2.sent;\n          Router.push('/');\n\n        case 7:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\n\nvar Post = function Post(props) {\n  var title = props.title;\n  if (!props.published) title = \"\".concat(title, \" (Draft)\");\n  var authorName = props.author ? props.author.name : 'Unknown author';\n  return __jsx(Layout, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: \"jsx-\".concat(styles.__hash) + \" \" + 'page',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    className: \"jsx-\".concat(styles.__hash),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"small\", {\n    className: \"jsx-\".concat(styles.__hash),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"By \", authorName), __jsx(ReactMarkdown, {\n    source: props.content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: \"jsx-\".concat(styles.__hash) + \" \" + 'actions',\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, !props.published && __jsx(\"button\", {\n    onClick: function onClick() {\n      return publish(props.id);\n    },\n    className: \"jsx-\".concat(styles.__hash),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Publish\"), __jsx(\"button\", {\n    onClick: function onClick() {\n      return destroy(props.id);\n    },\n    className: \"jsx-\".concat(styles.__hash),\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, \"Delete\"))), __jsx(_JSXStyle, {\n    id: styles.__hash,\n    __self: _this\n  }, styles));\n};\n\nexport var __N_SSP = true;\nexport var styles = \"\\n  .page {\\n    background: white;\\n    padding: 2rem;\\n  }\\n\\n  .actions {\\n    margin-top: 2rem;\\n  }\\n\\n  button {\\n    background: #ececec;\\n    border: 0;\\n    border-radius: 0.125rem;\\n    padding: 1rem 2rem;\\n  }\\n\\n  button + button {\\n    margin-left: 1rem;\\n  }\\n\";\nexport default Post;","map":{"version":3,"sources":["/Users/stuartmoir/Desktop/profdev/prisma/my-prisma-examples/javascript/7_rest-nextjs/pages/p/[id].jsx"],"names":["ReactMarkdown","Router","fetch","Layout","publish","id","method","res","json","data","push","destroy","Post","props","title","published","authorName","author","name","content","styles"],"mappings":";;;;;;;;AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,SAAeC,OAAf,CAAuBC,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACoBH,KAAK,6CAAsCG,EAAtC,GAA4C;AACjEC,YAAAA,MAAM,EAAE;AADyD,WAA5C,CADzB;;AAAA;AACQC,UAAAA,GADR;AAAA;AAAA,2CAIqBA,GAAG,CAACC,IAAJ,EAJrB;;AAAA;AAIQC,UAAAA,IAJR;AAAA;AAAA,2CAKQR,MAAM,CAACS,IAAP,CAAY,GAAZ,CALR;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,SAAeC,OAAf,CAAuBN,EAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,2CACoBH,KAAK,0CAAmCG,EAAnC,GAAyC;AAC9DC,YAAAA,MAAM,EAAE;AADsD,WAAzC,CADzB;;AAAA;AACQC,UAAAA,GADR;AAAA;AAAA,2CAIqBA,GAAG,CAACC,IAAJ,EAJrB;;AAAA;AAIQC,UAAAA,IAJR;AAKER,UAAAA,MAAM,CAACS,IAAP,CAAY,GAAZ;;AALF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAQA,IAAME,IAAI,GAAG,SAAPA,IAAO,CAAAC,KAAK,EAAI;AACpB,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACA,MAAI,CAACD,KAAK,CAACE,SAAX,EAAsBD,KAAK,aAAMA,KAAN,aAAL;AACtB,MAAME,UAAU,GAAGH,KAAK,CAACI,MAAN,GAAeJ,KAAK,CAACI,MAAN,CAAaC,IAA5B,GAAmC,gBAAtD;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,oDAAe,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAWE,UAAX,CAFF,EAGE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEH,KAAK,CAACM,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAA,oDAAe,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACN,KAAK,CAACE,SAAP,IACC;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMX,OAAO,CAACS,KAAK,CAACR,EAAP,CAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,EAIE;AAAQ,IAAA,OAAO,EAAE;AAAA,aAAMM,OAAO,CAACE,KAAK,CAACR,EAAP,CAAb;AAAA,KAAjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,CAJF,CADF;AAAA;AAAA;AAAA,aADF;AAgBD,CArBD;;;AAuBA,OAAO,IAAMe,MAAM,uRAAZ;AA4BP,eAAeR,IAAf","sourcesContent":["import ReactMarkdown from 'react-markdown';\nimport Router from 'next/router';\nimport fetch from 'isomorphic-unfetch';\n\nimport Layout from '../../components/Layout';\n\nasync function publish(id) {\n  const res = await fetch(`http://localhost:3000/api/publish/${id}`, {\n    method: 'PUT'\n  });\n  const data = await res.json();\n  await Router.push('/');\n}\n\nasync function destroy(id) {\n  const res = await fetch(`http://localhost:3000/api/post/${id}`, {\n    method: 'DELETE'\n  });\n  const data = await res.json();\n  Router.push('/');\n}\n\nconst Post = props => {\n  let title = props.title;\n  if (!props.published) title = `${title} (Draft)`;\n  const authorName = props.author ? props.author.name : 'Unknown author';\n\n  return (\n    <Layout>\n      <div className='page'>\n        <h2>{title}</h2>\n        <small>By {authorName}</small>\n        <ReactMarkdown source={props.content} />\n        <div className='actions'>\n          {!props.published && (\n            <button onClick={() => publish(props.id)}>Publish</button>\n          )}\n          <button onClick={() => destroy(props.id)}>Delete</button>\n        </div>\n      </div>\n      <style jsx>{styles}</style>\n    </Layout>\n  );\n}\n\nexport const styles =`\n  .page {\n    background: white;\n    padding: 2rem;\n  }\n\n  .actions {\n    margin-top: 2rem;\n  }\n\n  button {\n    background: #ececec;\n    border: 0;\n    border-radius: 0.125rem;\n    padding: 1rem 2rem;\n  }\n\n  button + button {\n    margin-left: 1rem;\n  }\n`;\n\nexport const getServerSideProps = async context => {\n  const res = await fetch(`http://localhost:3000/api/post/${context.params.id}`);\n  const data = await res.json();\n  return { props: { ...data } };\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}