{"ast":null,"code":"import _JSXStyle from \"styled-jsx/style\";\nimport ReactMarkdown from 'react-markdown';\nimport Router from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../../components/Layout';\n\nasync function publish(id) {\n  const res = await fetch(`http://localhost:3000/api/publish/${id}`, {\n    method: 'PUT'\n  });\n  const data = await res.json();\n  await Router.push('/');\n}\n\nasync function destroy(id) {\n  const res = await fetch(`http://localhost:3000/api/post/${id}`, {\n    method: 'DELETE'\n  });\n  const data = await res.json();\n  Router.push('/');\n}\n\nconst Post = props => {\n  let title = props.title;\n  if (!props.published) title = `${title} (Draft)`;\n  const authorName = props.author ? props.author.name : 'Unknown author';\n  return <Layout>\n      <div className={`jsx-${styles.__hash}` + \" \" + 'page'}>\n        <h2 className={`jsx-${styles.__hash}`}>{title}</h2>\n        <small className={`jsx-${styles.__hash}`}>By {authorName}</small>\n        <ReactMarkdown source={props.content} />\n        <div className={`jsx-${styles.__hash}` + \" \" + 'actions'}>\n          {!props.published && <button onClick={() => publish(props.id)} className={`jsx-${styles.__hash}`}>Publish</button>}\n          <button onClick={() => destroy(props.id)} className={`jsx-${styles.__hash}`}>Delete</button>\n        </div>\n      </div>\n      <_JSXStyle id={styles.__hash}>{styles}</_JSXStyle>\n    </Layout>;\n};\n\nexport var __N_SSP = true;\nexport const styles = `\n  .page {\n    background: white;\n    padding: 2rem;\n  }\n\n  .actions {\n    margin-top: 2rem;\n  }\n\n  button {\n    background: #ececec;\n    border: 0;\n    border-radius: 0.125rem;\n    padding: 1rem 2rem;\n  }\n\n  button + button {\n    margin-left: 1rem;\n  }\n`;\nexport default Post;","map":{"version":3,"sources":["/Users/stuartmoir/Desktop/profdev/prisma/my-prisma-examples/javascript/7_rest-nextjs/pages/p/[id].jsx"],"names":["ReactMarkdown","Router","fetch","Layout","publish","id","res","method","data","json","push","destroy","Post","props","title","published","authorName","author","name","content","styles"],"mappings":";AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,eAAeC,OAAf,CAAuBC,EAAvB,EAA2B;AACzB,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAAE,qCAAoCG,EAAG,EAAzC,EAA4C;AACjEE,IAAAA,MAAM,EAAE;AADyD,GAA5C,CAAvB;AAGA,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,QAAMR,MAAM,CAACS,IAAP,CAAY,GAAZ,CAAN;AACD;;AAED,eAAeC,OAAf,CAAuBN,EAAvB,EAA2B;AACzB,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAAE,kCAAiCG,EAAG,EAAtC,EAAyC;AAC9DE,IAAAA,MAAM,EAAE;AADsD,GAAzC,CAAvB;AAGA,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAR,EAAAA,MAAM,CAACS,IAAP,CAAY,GAAZ;AACD;;AAED,MAAME,IAAI,GAAGC,KAAK,IAAI;AACpB,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACA,MAAI,CAACD,KAAK,CAACE,SAAX,EAAsBD,KAAK,GAAI,GAAEA,KAAM,UAAjB;AACtB,QAAME,UAAU,GAAGH,KAAK,CAACI,MAAN,GAAeJ,KAAK,CAACI,MAAN,CAAaC,IAA5B,GAAmC,gBAAtD;AAEA,SACE,CAAC,MAAD;MACE,CAAC,GAAD,2CAAe,MAAf;QACE,CAAC,EAAD,oCAAI,CAACJ,KAAD,CAAO,EAAE,EAAF;QACX,CAAC,KAAD,oCAAO,GAAG,CAACE,UAAD,CAAY,EAAE,KAAF;QACtB,CAAC,aAAD,CAAe,OAAO,CAACH,KAAK,CAACM,OAAP,CAAtB;QACA,CAAC,GAAD,2CAAe,SAAf;UACE,CAAC,CAACN,KAAK,CAACE,SAAP,IACC,CAAC,MAAD,CAAQ,QAAQ,CAAC,MAAMX,OAAO,CAACS,KAAK,CAACR,EAAP,CAAd,CAAhB,oCAA0C,OAAO,EAAE,MAAF,CADnD;UAGA,CAAC,MAAD,CAAQ,QAAQ,CAAC,MAAMM,OAAO,CAACE,KAAK,CAACR,EAAP,CAAd,CAAhB,oCAA0C,MAAM,EAAE,MAAF;QAClD,EAAE,GAAF;MACF,EAAE,GAAF;MAXF;IAaA,EAAE,MAAF,CAdF;AAgBD,CArBD;;;AAuBA,OAAO,MAAMe,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;CAAf;AA4BP,eAAeR,IAAf","sourcesContent":["import ReactMarkdown from 'react-markdown';\nimport Router from 'next/router';\nimport fetch from 'isomorphic-unfetch';\n\nimport Layout from '../../components/Layout';\n\nasync function publish(id) {\n  const res = await fetch(`http://localhost:3000/api/publish/${id}`, {\n    method: 'PUT'\n  });\n  const data = await res.json();\n  await Router.push('/');\n}\n\nasync function destroy(id) {\n  const res = await fetch(`http://localhost:3000/api/post/${id}`, {\n    method: 'DELETE'\n  });\n  const data = await res.json();\n  Router.push('/');\n}\n\nconst Post = props => {\n  let title = props.title;\n  if (!props.published) title = `${title} (Draft)`;\n  const authorName = props.author ? props.author.name : 'Unknown author';\n\n  return (\n    <Layout>\n      <div className='page'>\n        <h2>{title}</h2>\n        <small>By {authorName}</small>\n        <ReactMarkdown source={props.content} />\n        <div className='actions'>\n          {!props.published && (\n            <button onClick={() => publish(props.id)}>Publish</button>\n          )}\n          <button onClick={() => destroy(props.id)}>Delete</button>\n        </div>\n      </div>\n      <style jsx>{styles}</style>\n    </Layout>\n  );\n}\n\nexport const styles =`\n  .page {\n    background: white;\n    padding: 2rem;\n  }\n\n  .actions {\n    margin-top: 2rem;\n  }\n\n  button {\n    background: #ececec;\n    border: 0;\n    border-radius: 0.125rem;\n    padding: 1rem 2rem;\n  }\n\n  button + button {\n    margin-left: 1rem;\n  }\n`;\n\nexport const getServerSideProps = async context => {\n  const res = await fetch(`http://localhost:3000/api/post/${context.params.id}`);\n  const data = await res.json();\n  return { props: { ...data } };\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}