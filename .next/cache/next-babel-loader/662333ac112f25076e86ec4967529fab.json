{"ast":null,"code":"var _jsxFileName = \"/Users/stuartmoir/Desktop/profdev/prisma/my-prisma-examples/javascript/7_rest-nextjs/pages/p/[id].jsx\";\nimport _JSXStyle from \"styled-jsx/style\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport ReactMarkdown from 'react-markdown';\nimport Router from 'next/router';\nimport fetch from 'isomorphic-unfetch';\nimport Layout from '../../components/Layout';\n\nasync function publish(id) {\n  const res = await fetch(`http://localhost:3000/api/publish/${id}`, {\n    method: 'PUT'\n  });\n  const data = await res.json();\n  await Router.push('/');\n}\n\nasync function destroy(id) {\n  const res = await fetch(`http://localhost:3000/api/post/${id}`, {\n    method: 'DELETE'\n  });\n  const data = await res.json();\n  Router.push('/');\n}\n\nconst Post = props => {\n  let title = props.title;\n  if (!props.published) title = `${title} (Draft)`;\n  const authorName = props.author ? props.author.name : 'Unknown author';\n  return __jsx(Layout, {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 5\n    }\n  }, __jsx(\"div\", {\n    className: `jsx-${styles.__hash}` + \" \" + 'page',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }\n  }, __jsx(\"h2\", {\n    className: `jsx-${styles.__hash}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, title), __jsx(\"small\", {\n    className: `jsx-${styles.__hash}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }, \"By \", authorName), __jsx(ReactMarkdown, {\n    source: props.content,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }\n  }), __jsx(\"div\", {\n    className: `jsx-${styles.__hash}` + \" \" + 'actions',\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }\n  }, !props.published && __jsx(\"button\", {\n    onClick: () => publish(props.id),\n    className: `jsx-${styles.__hash}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 13\n    }\n  }, \"Publish\"), __jsx(\"button\", {\n    onClick: () => destroy(props.id),\n    className: `jsx-${styles.__hash}`,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 11\n    }\n  }, \"Delete\"))), __jsx(_JSXStyle, {\n    id: styles.__hash,\n    __self: this\n  }, styles));\n};\n\nexport const styles = `\n  .page {\n    background: white;\n    padding: 2rem;\n  }\n\n  .actions {\n    margin-top: 2rem;\n  }\n\n  button {\n    background: #ececec;\n    border: 0;\n    border-radius: 0.125rem;\n    padding: 1rem 2rem;\n  }\n\n  button + button {\n    margin-left: 1rem;\n  }\n`;\nexport const getServerSideProps = async context => {\n  const res = await fetch(`http://localhost:3000/api/post/${context.params.id}`);\n  const data = await res.json();\n  return {\n    props: _objectSpread({}, data)\n  };\n};\nexport default Post;","map":{"version":3,"sources":["/Users/stuartmoir/Desktop/profdev/prisma/my-prisma-examples/javascript/7_rest-nextjs/pages/p/[id].jsx"],"names":["ReactMarkdown","Router","fetch","Layout","publish","id","res","method","data","json","push","destroy","Post","props","title","published","authorName","author","name","content","styles","getServerSideProps","context","params"],"mappings":";;;;;;;;;;;AAAA,OAAOA,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,aAAnB;AACA,OAAOC,KAAP,MAAkB,oBAAlB;AAEA,OAAOC,MAAP,MAAmB,yBAAnB;;AAEA,eAAeC,OAAf,CAAuBC,EAAvB,EAA2B;AACzB,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAAE,qCAAoCG,EAAG,EAAzC,EAA4C;AACjEE,IAAAA,MAAM,EAAE;AADyD,GAA5C,CAAvB;AAGA,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,QAAMR,MAAM,CAACS,IAAP,CAAY,GAAZ,CAAN;AACD;;AAED,eAAeC,OAAf,CAAuBN,EAAvB,EAA2B;AACzB,QAAMC,GAAG,GAAG,MAAMJ,KAAK,CAAE,kCAAiCG,EAAG,EAAtC,EAAyC;AAC9DE,IAAAA,MAAM,EAAE;AADsD,GAAzC,CAAvB;AAGA,QAAMC,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACAR,EAAAA,MAAM,CAACS,IAAP,CAAY,GAAZ;AACD;;AAED,MAAME,IAAI,GAAGC,KAAK,IAAI;AACpB,MAAIC,KAAK,GAAGD,KAAK,CAACC,KAAlB;AACA,MAAI,CAACD,KAAK,CAACE,SAAX,EAAsBD,KAAK,GAAI,GAAEA,KAAM,UAAjB;AACtB,QAAME,UAAU,GAAGH,KAAK,CAACI,MAAN,GAAeJ,KAAK,CAACI,MAAN,CAAaC,IAA5B,GAAmC,gBAAtD;AAEA,SACE,MAAC,MAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA,8CAAe,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAKJ,KAAL,CADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAWE,UAAX,CAFF,EAGE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEH,KAAK,CAACM,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAIE;AAAA,8CAAe,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACG,CAACN,KAAK,CAACE,SAAP,IACC;AAAQ,IAAA,OAAO,EAAE,MAAMX,OAAO,CAACS,KAAK,CAACR,EAAP,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAFJ,EAIE;AAAQ,IAAA,OAAO,EAAE,MAAMM,OAAO,CAACE,KAAK,CAACR,EAAP,CAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,CAJF,CADF;AAAA;AAAA;AAAA,aADF;AAgBD,CArBD;;AAuBA,OAAO,MAAMe,MAAM,GAAG;;;;;;;;;;;;;;;;;;;;CAAf;AAsBP,OAAO,MAAMC,kBAAkB,GAAG,MAAMC,OAAN,IAAiB;AACjD,QAAMhB,GAAG,GAAG,MAAMJ,KAAK,CAAE,kCAAiCoB,OAAO,CAACC,MAAR,CAAelB,EAAG,EAArD,CAAvB;AACA,QAAMG,IAAI,GAAG,MAAMF,GAAG,CAACG,IAAJ,EAAnB;AACA,SAAO;AAAEI,IAAAA,KAAK,oBAAOL,IAAP;AAAP,GAAP;AACD,CAJM;AAMP,eAAeI,IAAf","sourcesContent":["import ReactMarkdown from 'react-markdown';\nimport Router from 'next/router';\nimport fetch from 'isomorphic-unfetch';\n\nimport Layout from '../../components/Layout';\n\nasync function publish(id) {\n  const res = await fetch(`http://localhost:3000/api/publish/${id}`, {\n    method: 'PUT'\n  });\n  const data = await res.json();\n  await Router.push('/');\n}\n\nasync function destroy(id) {\n  const res = await fetch(`http://localhost:3000/api/post/${id}`, {\n    method: 'DELETE'\n  });\n  const data = await res.json();\n  Router.push('/');\n}\n\nconst Post = props => {\n  let title = props.title;\n  if (!props.published) title = `${title} (Draft)`;\n  const authorName = props.author ? props.author.name : 'Unknown author';\n\n  return (\n    <Layout>\n      <div className='page'>\n        <h2>{title}</h2>\n        <small>By {authorName}</small>\n        <ReactMarkdown source={props.content} />\n        <div className='actions'>\n          {!props.published && (\n            <button onClick={() => publish(props.id)}>Publish</button>\n          )}\n          <button onClick={() => destroy(props.id)}>Delete</button>\n        </div>\n      </div>\n      <style jsx>{styles}</style>\n    </Layout>\n  );\n}\n\nexport const styles =`\n  .page {\n    background: white;\n    padding: 2rem;\n  }\n\n  .actions {\n    margin-top: 2rem;\n  }\n\n  button {\n    background: #ececec;\n    border: 0;\n    border-radius: 0.125rem;\n    padding: 1rem 2rem;\n  }\n\n  button + button {\n    margin-left: 1rem;\n  }\n`;\n\nexport const getServerSideProps = async context => {\n  const res = await fetch(`http://localhost:3000/api/post/${context.params.id}`);\n  const data = await res.json();\n  return { props: { ...data } };\n}\n\nexport default Post;\n"]},"metadata":{},"sourceType":"module"}